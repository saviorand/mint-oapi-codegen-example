// Mint API Client generated by github.com/oapi-codegen/oapi-codegen/v2 version v0.2.4
// DO NOT EDIT.
//
// This file provides types and client methods for interacting with the OpenAPI HTTP API.



// CreateTodo defines model for CreateTodo.
type CreateTodo {
  text : Maybe(String)
}

// Todo defines model for Todo.
type Todo {
  completed : Maybe(Bool),
  id : Maybe(Number),
  text : Maybe(String)
}


































// APIError represents errors that can occur during API calls
type APIError {
  HttpError(Http.ErrorResponse)
  JsonParseError
  DecodeError(Object.Error)
}

// TodoApi provides HTTP client methods for the API
module TodoApi {
  // The base URL of the API server
  const BASE_URL = "http://localhost:8080"

// GetTodos
  fun getTodos() : Promise(Result(APIError, Array(Todo))) {

    let url =
      "#{BASE_URL}/todos"

    let request =
      Http.get(url)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as Array(Todo)
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

// PostTodos with body
  fun postTodos(body : CreateTodo) : Promise(Result(APIError, Todo)) {

    let url =
      "#{BASE_URL}/todos"

    let request =
      Http.post(url)
      |> Http.jsonBody(encode body)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as Todo
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

// DeleteTodosId
  fun deleteTodosId(id : String) : Promise(Result(APIError, Bool)) {

    let url =
      "#{BASE_URL}/todos/#{id}"

    let request =
      Http.delete(url)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    // DELETE returns 204 No Content, so just return success
    Result.Ok(true)
  }

// GetTodosId
  fun getTodosId(id : String) : Promise(Result(APIError, Todo)) {

    let url =
      "#{BASE_URL}/todos/#{id}"

    let request =
      Http.get(url)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as Todo
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

// PutTodosId with body
  fun putTodosId(id : String, body : Todo) : Promise(Result(APIError, Todo)) {

    let url =
      "#{BASE_URL}/todos/#{id}"

    let request =
      Http.put(url)
      |> Http.jsonBody(encode body)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as Todo
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }


}
