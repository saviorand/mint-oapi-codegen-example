// Mint API Client generated by github.com/oapi-codegen/oapi-codegen/v2 version v0.2.2
// DO NOT EDIT.
//
// This file provides types and client methods for interacting with the OpenAPI HTTP API.



// NewPost defines model for NewPost.
type NewPost {
  authorId : Number,
  content : String,
  title : String
}

// Post defines model for Post.
type Post {
  authorId : Number,
  content : String,
  id : Number,
  published : Maybe(Bool),
  title : String
}

// User defines model for User.
type User {
  bio : Maybe(String),
  email : String,
  id : Number,
  username : String
}



// ListPostsParams defines parameters for ListPosts.
type ListPostsParams {
  limit : Maybe(Number),
  offset : Maybe(Number)
}























// APIError represents errors that can occur during API calls
type APIError {
  HttpError(Http.ErrorResponse)
  JsonParseError
  DecodeError(Object.Error)
}

// BlogApi provides HTTP client methods for the API
module BlogApi {
  // The base URL of the API server
  const BASE_URL = "https://jsonplaceholder.typicode.com"

// ListPosts
  fun listPosts(params : ListPostsParams) : Promise(Result(APIError, Array(Post))) {
    let queryParams =
      SearchParams.empty()
      
      |> ((sp : SearchParams) : SearchParams {
        case params.limit {
          Maybe.Just(value) =>
            SearchParams.set("limit", Number.toString(value), sp)
          
          Maybe.Nothing =>
            sp
        }
      })
      
      |> ((sp : SearchParams) : SearchParams {
        case params.offset {
          Maybe.Just(value) =>
            SearchParams.set("offset", Number.toString(value), sp)
          
          Maybe.Nothing =>
            sp
        }
      })

    let queryString =
      SearchParams.toString(queryParams)
      |> ((qs : String) : String {
        if String.isEmpty(qs) {
          ""
        } else {
          "?" + qs
        }
      })

    let url =
      "#{BASE_URL}/posts" + queryString

    let request =
      Http.get(url)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as Array(Post)
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

// CreatePost with body
  fun createPost(body : NewPost) : Promise(Result(APIError, String)) {

    let url =
      "#{BASE_URL}/posts"

    let request =
      Http.post(url)
      |> Http.jsonBody(encode body)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as String
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

// GetPost
  fun getPost(postId : Number) : Promise(Result(APIError, Post)) {

    let url =
      "#{BASE_URL}/posts/#{postId}"

    let request =
      Http.get(url)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as Post
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

// GetUser
  fun getUser(userId : Number) : Promise(Result(APIError, User)) {

    let url =
      "#{BASE_URL}/users/#{userId}"

    let request =
      Http.get(url)

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as User
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }


}
